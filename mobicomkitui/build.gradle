apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

rootProject.allprojects {
    repositories {
        maven {
            url "http://giphy.bintray.com/giphy-sdk"
        }
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "5.101.0"
        consumerProguardFiles 'proguard-rules.txt'
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':mobicomkit')

    api "com.google.firebase:firebase-messaging:22.0.0"
    api "com.google.android.gms:play-services-maps:17.0.1"
    api "com.google.android.gms:play-services-location:18.0.0"
    implementation "de.hdodenhof:circleimageview:3.1.0"
    implementation 'com.google.android.material:material:1.3.0'
    implementation "com.theartofdev.edmodo:android-image-cropper:2.8.0"
    implementation "com.github.bumptech.glide:glide:4.12.0"
    implementation 'com.giphy.sdk:ui:2.1.0'
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}

//Release
/*
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false // add this line

    source = android.sourceSets.main.java.srcDirs
    //source = android.sourceSets.main.allJava
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = 'com.applozic.communication.uiwidget'
            artifactId = project.getName()
            version = android.defaultConfig.versionName

            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact(javadocJar)
            artifact(sourcesJar)

            //generate POM
            pom.withXml {
                def node = asNode()
                def dependenciesNode = node.appendNode('dependencies')
                def dependencies = { Dependency dep ->
                    if (dep.group == null || dep.name == null || dep.name == "unspecified") {
                        return
                    }

                    def dependencyGroup
                    if (dep.group == "Android-SDK-Dev") { //for the mobicomkit dependency
                        dependencyGroup = 'com.applozic.communication.message'
                    } else {
                        dependencyGroup = dep.group
                    }

                    def dependencyVersion
                    if (dep.version == "unspecified" || dep.version == null) { //for the mobicomkit dependency
                        dependencyVersion = version
                    } else {
                        dependencyVersion = dep.version
                    }

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependencyGroup)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dependencyVersion)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusion = exclusionsNode.appendNode('exclusion')
                            exclusion.appendNode('groupId', rule.group ?: '*')
                            exclusion.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }

                // List all dependencies and write to POM
                configurations.api.getAllDependencies().each dependencies
                configurations.implementation.getAllDependencies().each dependencies
            }
        }
    }
}

artifactoryPublish {
    publications(publishing.publications.aar)
}
*/

/* ext {
    // Where you will see your artifact in Bintray's web interface
    // The "bintrayName" should match the name of the Bintray repro.
    bintrayRepo = 'maven'
    bintrayName = 'applozic-communication-uiwidget'

    // Maven metadata
    publishedGroupId = 'com.applozic.communication.uiwidget'
    libraryName = 'mobicomkitui'
    // Save yourself a head ache, and set this equal to the name of the Android Studio library
    // module. The artifact name needs to match the name of the library.
    artifact = 'mobicomkitui'

    libraryDescription = 'Applozic Communication UI Widget'
    libraryVersion = '5.98'

    developerId = 'devashish'
    developerName = 'Applozic'
    developerEmail = 'devashish.mamgain@gmail.com'
}



apply from: 'https://raw.githubusercontent.com/attwellBrian/JCenter/master/installv1.gradle'

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false // add this line

    source = android.sourceSets.main.java.srcDirs
    //source = android.sourceSets.main.allJava
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            // Optional. The passphrase for GPG signing'
            // gpg {
            //    sign = true //Determines whether to GPG sign the files. The default is false
            //    passphrase = properties.getProperty("bintray.gpg.password")
            //}
        }
    }
}*/

